
Sabemos que>
    -El tablero de juegue consta de NxN casillas
    -x0 e y0 son las posiciones iniciales, tipicamente 0,0
    -x1 e y1 es la posicion de destino, en este caso siempre N,N

	
	
			
ALGORITMO
1 - Creamos la tabla NxN que almacenara los pasos dados, todos a null menos los visitados que ira de desde 0 hasta el ultimo paso, los no visitados estan a NULL
    Creamos la tabla NxNx2 que almacenara los padres para llegar a esa posicion, es decir si a la casilla 1,1 hemos llegado desde la 0,0 en la casilla 1,1 vamos a guardar 0,0. Los no visitados estan a NULL
    Creamos la tabla NxN de obstaculos, la cual las casillas con obstaculo tendran un 1 y el resto un 0.
    Creaamos el vector cola, donde almacenaremos los puntos a procesar
    
2 - Ponemos la casilla de salida como visitada y ponemos esta casilla en el primer puesto de la cola, para ser la primera en ser procesada.
    En esta cola se meteran las casillas aun no visitadas, desde la cual se puede ir en la ultima comprobada.

3 - hacer lo siguiente hasta que la cola este vacia o hasta que se llegue a la posicion deseada:
    3.1 - Sacamos el primer elemento de la cola
    3.2 - Comprobamos todas las posiciones a las que se puede ir desde dicho elemento y las guardamos en la cola si no han sido visitadas ya*
    3.3 - Guardamos en la matriz de los padres estas posiciones y todas tienen como padre la que sacamos en el paso 3.1
    3.3 - Comprobamos si alguna de las posiciones de la cola es la meta
    
    *Si una posicion ya ha sido visitada, esto significa que no tenemos que sobrescribir esa posicion con una menos optima.

PSEUDOCODIGO
----------------------------------------------------------------------------------------------------------------------

FUNCION calcular_posibles_destinos devuelve entero
	PARAMETROS:
		entero N
		entero tablero[][]
		entero x, y
		int cola[]
		int matriz_padres[][][]

	entero vector_movimientos[8][2] = {{1,2},{2,1},{2,-1},{1,-2},{-1,2},{-2,1},{-2,-1},{-1,-2}}
	
	desde 0 -> 8 ++
		x_temp = x + vector_movimientos[i][0]
		y_temp = y + vector_movimientos[i][1]
		si es_posible(N, x_temp, y_temp, tablero[][])
			posibles_destinos[i][0] = x_temp
			posibles_destinos[i][1] = y_temp
		FINSI
	FIN DESDE
FIN FUNCION

----------------------------------------------------------------------------------------------------------------------

FUNCION es_posible devuelve entero
	PARAMETROS 
	entero N
	entero x, y
	entero tablero[][]
	
	si X < 0 OR y < 0 OR x>=N OR y>=N entonces:
		devolver 0
	si no
		si tablero[x][y] igual 1 entonces
			devolver 0
		si no
			devolver 1
		FIN SI
	FIN SI
FIN FUNCION
		
----------------------------------------------------------------------------------------------------------------------




















