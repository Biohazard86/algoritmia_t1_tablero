
Sabemos que>
    -El tablero de juegue consta de NxN casillas
    -x0 e y0 son las posiciones iniciales, tipicamente 0,0
    -x1 e y1 es la posicion de destino, en este caso siempre N,N

	
	
			
ALGORITMO
1 - Creamos la tabla NxN que almacenara los visitados, 0 = no visitado / 1 = visitado
    Creamos la tabla NxNx3 que almacenara los padres para llegar a esa posicion, es decir si a la casilla 1,1 hemos llegado desde la 0,0 en la casilla 1,1 vamos a guardar 0,0. Los no visitados estan a NULL
    matriz_padres[][][0] -> Pasos para llegar a esa casilla
    matriz_padres[][][1] -> Coordenada X del padre para llegar a esa cailla
    matriz_padres[][][2] -> Coordenada Y del padre para llegar a esa casilla
    Creamos la tabla NxN de obstaculos, la cual las casillas con obstaculo tendran un 1 y el resto un 0.
    Creaamos el vector cola, donde almacenaremos los puntos a procesar. Esto puede ser un vector dimensional, para la X y la Y
    Creamos la variable entera iteraccion la cual la inicializamos a 0
    
2 - Ponemos la casilla de salida como visitada y ponemos esta casilla en el primer puesto de la cola, para ser la primera en ser procesada.
    En esta cola se meteran las casillas aun no visitadas, desde la cual se puede ir en la ultima comprobada.

3 - hacer lo siguiente hasta que la cola este vacia o hasta que se llegue a la posicion deseada:
    3.1 - Sacamos el primer elemento de la cola y lo guardamos como padre en esta iteraccion.	------------------------------------------------------	extrae_cola
    3.2 - Comprobamos todas las posiciones a las que se puede ir desde dicho elemento y las guardamos en la cola si no han sido visitadas ya*  -------  calcular_posibles_destinos + insertar_cola
    3.3 - Guardamos en la matriz de los padres estas posiciones y todas tienen como padre la que sacamos en el paso 3.1	------------------------------  guarda_recorrido + 
    3.3 - Comprobamos si la posicion del punto 3.1 es la meta.	--------------------------------------------------------------------------------------  comprueba_meta
    3.4 - Incrementamos la variable de iteraccion
    
    *Si una posicion ya ha sido visitada, esto significa que no tenemos que sobrescribir esa posicion con una menos optima.

4 - Reconstruir la ruta que se ha seguido para mostrarla por pantalla --------------------------------------------------------------------------------  reconstruir_camino

PSEUDOCODIGO
----------------------------------------------------------------------------------------------------------------------
//Cambiar cola por cola_x y cola_y, y cambviar matriz padres por matriz visitados

Con esta funcion comprobamos todos los posibles destinos a los que podemos ir desde un punto dado.
FUNCION calcular_posibles_destinos devuelve entero
	PARAMETROS:
		entero N
		entero tablero[][]
		entero x, y
		int *cola_x, *cola_y,
		int matriz_visitados[][]
		para llevar un control de si se ha podido acceder a alguna posicion o no entonces vamos a crear la siguiente var
		
	int posible_mover = 0

	entero vector_movimientos[8][2] = {{1,2},{2,1},{2,-1},{1,-2},{-1,2},{-2,1},{-2,-1},{-1,-2}}
	
	desde 0 -> 8 ++
		x_temp = x + vector_movimientos[i][0]
		y_temp = y + vector_movimientos[i][1]
		si es_posible(N, x_temp, y_temp, tablero[][])
			si matriz_visitados[y_temp][x_temp] != 1
				si tablero[y_temp][x_temp] != 1
					insertar_cola(x_temp, y_temp, cola_x, cola_y, N)
					matriz_visitados[y_temp][x_temp] = 1;
					
					posible_mover++
				FINSI
			FINSI
		FINSI		
	FIN DESDE
	
	si posible_mover == 0 entonces
		return posible_mover
	si no
		return posible_mover
	FINSI
	
FIN FUNCION

----------------------------------------------------------------------------------------------------------------------

Esta funcion ayuda a la anterior a saber si un punto es un obstaculo o si esta dentro del rango de NxN


FUNCION es_posible devuelve entero
	PARAMETROS 
		entero N
		entero x, y
		entero tablero[][]
	
	si X < 0 OR y < 0 OR x>=N OR y>=N entonces:
		devolver 0
	si no
		si tablero[x][y] igual 1 entonces
			devolver 0
		si no
			devolver 1
		FIN SI
	FIN SI
FIN FUNCION
		
----------------------------------------------------------------------------------------------------------------------

Esta funcion comprueba si ya ha sido visitado para si poderlo ingnorar

FUNCION comprueba_visitado devuelve entero
	PARAMETROS:
		entero x, y, N
		entero matriz_padres[][]
		
	si matriz_padres[x][y][0] != 1 entonces
		devuelve 1
	si no
		devuelve 0
	FINSI
	
FINFUNCION

----------------------------------------------------------------------------------------------------------------------
Esta funcion extrae de la cola y mueve al resto una posicion menos para que no se quede con el primer elemento vacio

FUNCION extrae_cola devuelve entero
	PARAMETROS
		entero n
		
		entero *x, *y, cola_x,cola_y
		
	int tam_vector = N*N, i;
	
	si cola_x[0] >= 0 && cola_y[0] >= 0
		*x = cola_x[0];
        	*y = cola_y[0];
	si no
		devuelve 0
		
	para i=0 hasta i<tam_vector hacer
		//En cada iteraccion aumentamos dos
		si cola_x[i] >= 0) && (cola_y[i] >= 0
			cola_x[i] = cola_x[i+1];
            		cola_y[i] = cola_y[i+1];
		si no
		
			cola_x[i] = -1;
			cola_y[i] = -1;

	FIN PARA		
FUN FUNCION

----------------------------------------------------------------------------------------------------------------------

Con esta funcion guardamos en la matriz NxNx2 los datos

FUNCION guarda_recorrido
	PARAMETROS
		entero iteraccion, N
		entero cola_X, cola_y
		entero padre_x, padre_y //Casilla de la que viene
		entero matriz_padres[][][]
		
	int x_temp,y_temp, tam_cola = N*N, i
	
	
	para i=0 hasta i<tam_cola hacer
		si (cola_x[i] >= 0) && (cola_y[i] >= 0)
			
			si debug
				mostrar "Se procede a insertar en la matriz de padres."
			FIN SI
				
			x_temp = cola_x[i];
            		y_temp = cola_y[i];
			
			
			
			si matriz_padres[x_temp][y_temp][0] > 0
				si debug
					mostrar "Se procede a insertar en la matriz de padres."
				FIN SI
				
				devuelve 0
			
			si no	
				si debug
					mostrar "Exito al insertar en la matriz de padres."
				FIN SI
			
				matriz_padres[x_temp][y_temp][0]=iteraccion
				matriz_padres[x_temp][y_temp][1]=y_padre
				matriz_padres[x_temp][y_temp][2]=x_padre
				return 1    
			fin si
			
		fin si
			
	FIN PARA
	
	tabla_ruta[posicion_x][posicion_y][0] = iteracion
	tabla_ruta[posicion_x][posicion_y][1] = padre_x
	tabla_ruta[posicion_x][posicion_y][2] = padre_y
	
	tablero[posicion_x][posicion_y] = 1 
	
FIN FUNCION

----------------------------------------------------------------------------------------------------------------------

Esta funcion comprueba si se ha llegado a la meta

FUNCION comprueba_meta devuelve entero
	PARAMETROS
		entero x, y
		entero meta_x, meta_y
		
	si x=meta_x && y=meta_y entonces
		devolver 1
	si no
		devolver 0
	FINSI
	
FIN FUNCION

----------------------------------------------------------------------------------------------------------------------

Esta funcion inserta un elemento en la cola. La recorremos hasta encontrarnos un NULL, que es donde insertaremos los nuevos valores. 0 para exito, 1 para error.

FUNCION insertar_cola devuelve entero
	PARAMETROS
		entero x, y
		entero cola[][]
		
	para i=0 hasta i=NxN i++
		si cola[i] == NULL entonces
			si cola[i+1] entonces
				cola[i] = x
				cola[i+1] = y
				retunr 0
			si no
				return 1 ya que hay un error
			FIN SI
		FIN SI
	FIN PARA
FIN FUNCION
		
----------------------------------------------------------------------------------------------------------------------

Esta funcion reconstruye el camino desde el final hasta el inicio

FUNCION reconstruir_camino devuelve entero
	PARAMETROS
		entero matriz_padres
		entero ruta
		entero x_destino, y_destino, iteraccion
	VARS
		entero x_ini, y_ini, x_fin, y_fin, iteraccion_ruta


	x_ini = x_destino
	y_ini = y_destino

	mientras x_ini != 0 & y_ini !=0 hacer:



	FIN mientras

FIN FUNCION
	









